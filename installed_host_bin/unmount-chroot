#!/bin/bash -e
# Copyright (c) Mon Jan 23 10:52:34 PST 2023 The chromeOSLinux Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

set -e

APPLICATION="${0##*/}"
ALLCHROOTS=''
BINDIR="`dirname "\`readlink -f -- "$0"\`"`"
CHROOTS="`readlink -m -- "$BINDIR/../chroots"`"
EXCLUDEROOT=''
FORCE=''
PRINT=''
SIGNAL='TERM'
TRIES=5
YES=''
ROOT="`readlink -m -- '/var/run/chromeOSLinux'`"

USAGE="$APPLICATION [options] name [...]

Unmounts one or more chroots, optionally killing any processes still running
inside them.

By default, it will run in interactive mode where it will ask to kill any
remaining processes if unable to unmount the chroot within 5 seconds.

Options:
    -a          Unmount all chroots in the CHROOTS directory.
    -c CHROOTS  Directory the chroots are in. Default: $CHROOTS
    -f          Forces a chroot to unmount, potentially breaking or killing
                other instances of the same chroot.
    -k KILL     Send the processes SIGKILL instead of SIGTERM.
    -p          Print to STDOUT the processes stopping a chroot from unmounting.
    -t TRIES    Number of seconds to try before signalling the processes.
                Use -t inf to be exceedingly patient. Default: $TRIES
    -x          Keep the root directory of the chroot mounted.
    -y          Signal any remaining processes without confirmation.
                Automatically escalates from SIGTERM to SIGKILL."

# Common functions

# Exits the script with exit code $1, spitting out message $@ to stderr
error() {
    local ecode="$1"
    shift
    if [ "$ecode" -eq 1 ]; then
        echo_color "r" "$*" 1>&2
    else
        echo "$*" 1>&2
    fi
    exit "$ecode"
}

# Setup trap ($1) in case of interrupt or error.
# Traps explicitly do not exit on command error.
# Traps are first disabled to avoid executing clean-up commands twice.
# In the case of interrupts, exit is called to avoid the script continuing.
# $1 must either be empty or end in a semicolon.
settrap() {
    trap "set +e; trap - INT HUP TERM 0; $1 exit 2" INT HUP TERM
    trap "set +e; trap - INT HUP TERM 0; $1" 0
}

# Prepend a command to the existing $TRAP
addtrap() {
    OLDTRAP="$TRAP"
    TRAP="$1;$TRAP"
    settrap "$TRAP"
}

# Revert the last trap change
undotrap() {
    TRAP="$OLDTRAP"
    settrap "$TRAP"
}

# Works mostly like built-in getopts but silently coalesces positional arguments.
# Does not take parameters. Set getopts_string prior to calling.
# Sets getopts_var and getopts_arg.
# $@ will be left with the positional arguments, so you should NOT shift at all.
# In bash, enables alias expansion, but that shouldn't impact anything.
shopt -q -s expand_aliases 2>/dev/null || true
# Running count of the number of positional arguments
# We're done processing if all of the remaining arguments are positional.
getopts_npos=0
getopts_dashdash=''
alias getopts_nextarg='getopts_ret=1
    while [ "$#" -gt "$getopts_npos" ]; do
        if [ -z "$getopts_dashdash" ] && getopts "$getopts_string" getopts_var; then
            if [ "$(($#+1-OPTIND))" -lt "$getopts_npos" ]; then
                # Bad parameter usage ate a positional argument.
                # Generate the proper error message by abusing getopts.
                set -- "-$getopts_var"
                getopts "$getopts_var:" getopts_var
                shift
            fi
            getopts_arg="$OPTARG"
            getopts_ret=0
            # Avoid -- confusion by shifting if OPTARG is set
            if [ -n "$OPTARG" ]; then
                shift "$((OPTIND-1))"
                OPTIND=1
            fi
            break
        fi
        # Do not let getopts consume a --
        if [ "$OPTIND" -gt 1 ]; then
            shift "$((OPTIND-2))"
            if [ "$1" != "--" ]; then
                shift
            fi
        fi
        OPTIND=1
        if [ -z "$getopts_dashdash" -a "$1" = "--" ]; then
            # Still need to loop through to fix the ordering
            getopts_dashdash=y
        else
            set -- "$@" "$1"
            getopts_npos="$((getopts_npos+1))"
        fi
        shift
    done
    [ "$getopts_ret" = 0 ]'

# Compares $RELEASE to the specified releases, assuming $DISTRODIR/releases is
# sorted oldest to newest. Every two parameters are considered criteria that are
# ORed together. The first parameter is the comparator, as provided to "test".
# The second parameter is the release to compare to. A comparison against a
# release from a different distro always fails. Since either $DISTRODIR/releases
# has to be readable or the release list has to be embedded, and RELEASE has to
# be set properly, this function should only be used in the context of targets.
# Returns non-zero if the release doesn't match
# Example:  release -ge quantal -ge wheezy
release() {
    if [ "$(($# % 2))" -ne 0 ]; then
        error 3 "$(echo_color "y" "invalid parameters to release(): $*")"
    fi
    # Load up the list of releases; this will be replaced with a literal list
    local releases="`cat "$DISTRODIR/releases" 2>/dev/null`"
    if [ -z "$releases" ]; then
        error 3 "$(echo_color "y" "list of releases for $DISTRO not found")"
    fi
    # End-of-word regex for awk
    local eow='([^a-z]|$)'
    local relnum="`echo "$releases" | awk "/^$RELEASE$eow/ {print NR; exit}"`"
    if [ -z "$relnum" ]; then
        error 3 "$(echo_color "y" "$RELEASE not found in $DISTRO")"
    fi
    while [ "$#" -ge 2 ]; do
        local cmp="`echo "$releases" | awk "/^$2$eow/ {print NR; exit}"`"
        if [ -n "$cmp" ] && test "$relnum" "$1" "$cmp"; then
            return 0
        fi
        shift 2
    done
    return 1
}

# Large writes to slow devices (e.g. SD card or USB stick) can cause a task to
# be stuck for longer than 120 seconds, which triggers a kernel panic (and an
# immediate reboot). Instead of disabling the timeout altogether, we just make
# sure the kernel does not panic (this is the default configuration of a vanilla
# kernel). See crbug.com/260955 for details.
disablehungtask() {
    echo 0 > /proc/sys/kernel/hung_task_panic
}

# Run an awk program, without buffering its output.
# unbuffered_awk 'program' [argument ...]
# In the awk code, all "print" calls must be replaced by "output"
#
# - Detects whether to run mawk or gawk (mawk is preferred as it is faster),
# - Prepends the definition of the "output" function to the awk program
# - Run the modified awk program.
# mawk needs '-W interactive' to flush the output properly (fflush does not
# work as documented, but apparently this behaviour is intentional, see
# https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=593504).
# Furthermore, fflush is not POSIX so we cannot use any other awk flavor.
unbuffered_awk() {
    local cmd
    if hash mawk 2>/dev/null; then
        cmd="mawk -W interactive"
    elif hash gawk 2>/dev/null; then
        cmd="gawk"
    else
        echo "Cannot find mawk or gawk." 1>&2
        return 1
    fi

    local program="$1"
    shift

    $cmd '
    function output(s) {
        print s
        fflush()
    }
    '"$program" "$@"
}

# Validate a chroot name: It cannot contain any /, and cannot be ".", ".." nor
# an empty string.
validate_name() {
    if [ "${1%/*}" != "$1" -o "$1" = "." -o "$1" = ".." -o -z "$1" ]; then
        return 1
    fi
    return 0
}

# Returns the mountpoint a path is on. The path doesn't need to exist.
# $1: the path to check
# outputs on stdout
getmountpoint() {
    mp="`readlink -m -- "$1"`"
    while ! stat -c '%m' "${mp:-/}" 2>/dev/null; do
        mp="${mp%/*}"
    done
}

# Echos to stderr, or /dev/tty if stdin is a tty but stderr is not
echo_tty() {
    if [ -t 0 -a ! -t 2 ]; then
        echo "$@" 1>/dev/tty
    else
        echo "$@" 1>&2
    fi
}

# Outputs colored text to stdout
# usage: echo_color [l][color] [colored string] [uncolored string]
# Specifying "t" (thick) uses bold text.
# Color can be red, green, yellow, blue, magenta, cyan.
# Color can be specified with just the first letter.
# example: echo_color "tr" "bold red" "normal text"
echo_color() {
    # If not outputting to a tty print no colors.
    if [ ! -t 2 ]; then
        shift
        echo "$@"
        return
    fi
    printf "\033["
    local c="$1"
    if [ "${c#t}" != "$c" ]; then
        printf "1;"
        c="${c#t}"
    else
        printf "0;"
    fi
    case "$c" in
        r*) printf "31m";;
        g*) printf "32m";;
        y*) printf "33m";;
        b*) printf "34m";;
        m*) printf "35m";;
        c*) printf "36m";;
         *) printf "37m";;
    esac
    shift
    local s='\n'
    if [ "$1" = '-n' ]; then
        s=''
        shift
    fi
    echo '-n' "$1"
    printf "\033[0m"
    shift
    echo '-n' "$*"
    printf "$s"
}

# Websocket interface
PIPEDIR='/tmp/chromeOSLinux-ext'
CRIATDISPLAY="$PIPEDIR/kiwi-display"
CROUTONLOCKDIR='/tmp/chromeOSLinux-lock'

# Write a command to chromeOSLinuxwebsocket, and read back response
websocketcommand() {
    # Check that $PIPEDIR and the FIFO pipes exist
    if ! [ -d "$PIPEDIR" -a -p "$PIPEDIR/in" -a -p "$PIPEDIR/out" ]; then
        echo "EError $PIPEDIR/in or $PIPEDIR/out are not pipes."
        exit 0
    fi

    if ! timeout 3 \
           sh -c "flock 5; cat > '$PIPEDIR/in';
                  cat '$PIPEDIR/out'" 5>"$PIPEDIR/lock"; then
        echo "EError timeout"
    fi
    chmod -Rf g+rwX "$PIPEDIR" || true
    chgrp -Rf chromeOSLinux "$PIPEDIR" || true
}

# Process arguments
getopts_string='ac:fkpt:xy'
while getopts_nextarg; do
    case "$getopts_var" in
    a) ALLCHROOTS='y';;
    c) CHROOTS="`readlink -m -- "$getopts_arg"`";;
    f) FORCE='y';;
    k) SIGNAL="KILL";;
    p) PRINT='y';;
    t) TRIES="$getopts_arg";;
    x) EXCLUDEROOT='y';;
    y) YES='a';;
    \?) error 2 "$USAGE";;
    esac
done

# Need at least one chroot listed, or -a; not both.
if [ $# = 0 -a -z "$ALLCHROOTS" ] || [ $# != 0 -a -n "$ALLCHROOTS" ]; then
    error 2 "$USAGE"
fi

# Make sure TRIES is valid
if [ "$TRIES" = inf ]; then
    TRIES=-1
elif [ "$TRIES" -lt -1 ]; then
    error 2 "$USAGE"
fi

# We need to run as root
if [ "$USER" != root -a "$UID" != 0 ]; then
    error 2 "$APPLICATION must be run as root."
fi

# Check if a chroot is running with this directory. We detect the
# appropriate commands by checking if the command's parent root is not equal
# to the pid's root. This avoids not unmounting due to a lazy-quitting
# background application within the chroot. We also don't consider processes
# that have a parent PID of 1 or that of session_manager's (which would mean an
# orphaned process in this case), as enter-chroot never orphans its children.
# $1: $base; the canonicalized base path of the chroot
# Returns: non-zero if the chroot is in use.
checkusage() {
    if [ -n "$FORCE" ]; then
        return 0
    fi
    local b="${1%/}/" pid ppid proot prootdir root rootdir pids=''
    local smgrpid="`pgrep -o -u 0 -x session_manager || echo 1`"
    for root in /proc/*/root; do
        if [ ! -r "$root" ]; then
            continue
        fi
        rootdir="`readlink -f -- "$root"`"
        rootdir="${rootdir%/}/"
        if [ "${rootdir#"$b"}" = "$rootdir" ]; then
            continue
        fi
        pid="${root#/proc/}"
        pid="${pid%/root}"
        ppid="`ps -p "$pid" -o ppid= 2>/dev/null | sed 's/ //g'`"
        if [ -z "$ppid" ] || [ "$ppid" -eq 1 -o "$ppid" -eq "$smgrpid" ]; then
            continue
        fi
        proot="/proc/$ppid/root"
        if [ -r "$proot" ]; then
            prootdir="`readlink -f -- "$proot"`"
            if [ "${prootdir%/}/" = "$rootdir" ]; then
                continue
            fi
        fi
        if [ -n "$PRINT" ]; then
            pids="$pids $pid"
            continue
        fi
        return 1
    done
    if [ -n "$PRINT" -a -n "$pids" ]; then
        ps -p "${pids# }" -o pid= -o cmd= || true
        return 1
    fi
    return 0
}

# If we specified all chroots, bring in all chroots.
if [ -n "$ALLCHROOTS" ]; then
    if [ ! -d "$CHROOTS" ]; then
        error 1 "$CHROOTS not found."
    fi
    set -- "$CHROOTS/"*
fi

# Follows and fixes dangerous symlinks, returning the canonicalized path.
fixabslinks() {
    local p="$CHROOT/$1" c
    # Follow and fix dangerous absolute symlinks
    while c="`readlink -m -- "$p"`" && [ "$c" != "$p" ]; do
        p="$CHROOT${c#"$CHROOT"}"
    done
    echo "$p"
}

# Unmount the specified chroot $1
# sets oldstyle if the chroot was unmounted in an old location.
# if oldstyle is set upon entry, skips the check for old-style mounts.
unmount() {
    NAME="${1#"$CHROOTS/"}"

    # Check for existence
    CHROOT="$CHROOTS/$NAME"
    if [ ! -d "$CHROOT" ]; then
        if [ -z "$ALLCHROOTS" ]; then
            echo "$CHROOT not found." 1>&2
            ret=1
        fi
        return 0
    fi

    # Switch to the true mount point, but sort of support old-style mounted
    # chroots with minimal false-positives to ease transition. Don't unmount
    # old-style twice in a row, though.
    CHROOTSRC="$CHROOT"
    oldencr="$CHROOTS/.secure/$NAME"
    if mountpoint -q "$oldencr" \
            && [ -d "$oldencr/etc/chromeOSLinux" -a -z "$oldstyle" ]; then
        # Old encrypted chroots
        oldstyle='y'
        CHROOT="$oldencr"
        echo "$CHROOTSRC appears to be mounted in $CHROOT" 1>&2
    elif mountpoint -q "$CHROOT" \
            && [ -d "$CHROOT/etc/chromeOSLinux" -a -z "$oldstyle" ]; then
        # Keep the chroot the same
        oldstyle='y'
        echo "$CHROOTSRC appears to be mounted in place" 1>&2
    else
        oldstyle=''
        CHROOT="$ROOT/${CHROOT#/}"
        if [ ! -d "$CHROOT" ]; then
            # Not mounted
            return 0
        fi
    fi

    base="`readlink -f -- "$CHROOT"`"

    if ! checkusage "$base"; then
        echo "Not unmounting $CHROOTSRC as another instance is using it." 1>&2
        ret=1
        return 0
    fi

    # Kill the chroot's system dbus if one is running; failure is fine
    env -i chroot "$CHROOT" su -s '/bin/sh' -c '
        pidfile="/var/run/dbus/pid"
        if [ ! -f "$pidfile" ]; then
            exit 0
        fi
        pid="`cat "$pidfile"`"
        if ! grep -q "^dbus-daemon" "/proc/$pid/cmdline" 2>/dev/null; then
            exit 0
        fi
        kill $pid' - root 2>/dev/null || true

    # Unmount all mounts
    ntries=0
    if [ -z "$EXCLUDEROOT" ]; then
        echo "Unmounting $CHROOTSRC..." 1>&2
    else
        echo "Pruning $CHROOTSRC mounts..." 1>&2
    fi
    baseesc="`echo "$base" | sed 's= =//=g'`"

    # Define the mountpoint filter to only unmount specific mounts.
    # The filter is run on the escaped version of the mountpoint.
    filter() {
        if [ -z "$EXCLUDEROOT" ]; then
            grep "^$baseesc\\(/.*\\)\\?\$"
        else
            # Don't include the base directory
            grep "^$baseesc/."
        fi
    }

    # Sync for safety
    sync

    # Make sure the chroot's system media bind-mount is marked as slave to avoid
    # unmounting devices system-wide. We still want to unmount locally-mounted
    # media, though.
    media="`fixabslinks '/var/host/media'`"
    if mountpoint -q "$media"; then
        mount --make-rslave "$media"
    fi

    # Some /proc/mounts entries may end with \040(deleted), in that case, try to
    # umount them with and without the suffix (in the unlikely case the mount
    # point actually ends with ' (deleted)')
    # umount has a bug and may return 0 when many mount points cannot be
    # unmounted, so we call it once per mount point ('-n 1')
    while ! sed "s=\\\\040=//=g" /proc/mounts | cut -d' ' -f2 | filter \
              | sed -e 's=//= =g;s/^\(\(.*\) (deleted)\)$/\1\n\2/' \
              | sort -r | xargs --no-run-if-empty -d '
' -n 1 umount 2>/dev/null; do
        if [ "$ntries" -eq "$TRIES" ]; then
            # Send signal to all processes running under the chroot
            # ...but confirm first.
            printonly=''
            if [ "${YES#[Aa]}" = "$YES" ]; then
                echo -n "Failed to unmount $CHROOTSRC. Kill processes? [a/k/y/p/N] " 1>&2
                if [ -n "$CROUTON_UNMOUNT_RESPONSE" ]; then
                    YES="$CROUTON_UNMOUNT_RESPONSE"
                    echo "$YES" 1>&2
                else
                    read -r YES
                fi
                if [ "${YES#[Kk]}" != "$YES" ]; then
                    SIGNAL='KILL'
                elif [ "${YES#[Pp]}" != "$YES" ]; then
                    printonly=y
                elif [ "${YES#[AaYy]}" = "$YES" ]; then
                    echo "Skipping unmounting of $CHROOTSRC" 1>&2
                    ret=1
                    break
                fi
            fi
            if [ -z "$printonly" ]; then
                echo "Sending SIG$SIGNAL to processes under $CHROOTSRC..." 1>&2
            fi
            for root in /proc/*/root; do
                if [ ! -r "$root" ] \
                        || [ ! "`readlink -f -- "$root"`" = "$base" ]; then
                    continue
                fi
                pid="${root#/proc/}"
                pid="${pid%/root}"
                if [ -n "${printonly:-"$PRINT"}" ]; then
                    ps -p "$pid" -o pid= -o cmd= || true
                fi
                if [ -z "$printonly" ]; then
                    kill "-$SIGNAL" "$pid" 2>/dev/null || true
                fi
            done

            # Escalate
            if [ "${YES#[Aa]}" != "$YES" ]; then
                SIGNAL='KILL'
            fi

            if [ -z "$printonly" ]; then
                ntries=0
            fi
        else
            ntries="$((ntries+1))"
        fi
        sleep 1
        if ! checkusage "$base"; then
            echo "Aborting unmounting $CHROOTSRC as another instance has begun using it." 1>&2
            ret=1
            break
        fi
    done

    # More sync for more safety
    sync
}

# Unmount each chroot
ret=0
for NAME in "$@"; do
    if [ -z "$NAME" ]; then
        continue
    fi
    oldstyle=''
    unmount "$NAME"
    # If we unmounted old-style, do it again in case the new-style was also mounted.
    if [ -n "$oldstyle" ]; then
        unmount "$NAME"
    fi
done

# HACK: restart debugd when running tests to avoid namespace issues.
# This will go away when we start using mount namespaces.
if [ -n "$CROUTON_UNMOUNT_RESTART_DEBUGD" ]; then
    restart debugd >/dev/null || true
fi

# Re-disable USB persistence (the Chromium OS default) if we no longer
# have chroots running with a root in removable media
if checkusage "$ROOT/media"; then
    for usbp in /sys/bus/usb/devices/*/power/persist; do
        if [ -e "$usbp" ]; then
            echo 0 > "$usbp"
        fi
    done
fi

exit $ret
