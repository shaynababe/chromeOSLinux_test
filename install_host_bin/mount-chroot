#!/bin/bash -e
# Copyright (c) 2022 The chromeOSLinux Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

set -e

APPLICATION="${0##*/}"
BINDIR="`dirname "\`readlink -f -- "$0"\`"`"
CHROOTS="`readlink -m -- "$BINDIR/../chroots"`"
CREATE=''
ENCRYPT=''
KEYFILE=''
PRINT=''
ROOT="`readlink -m -- '/var/run/chromeOSLinux'`"
MOUNTOPTS='rw,dev,exec,suid'
METRICSDIR='/run/metrics/external/chromeOSLinux'

USAGE="$APPLICATION [options] name [...]

Mounts one or more chroots into a root-only subdirectory of $ROOT

Options:
    -c CHROOTS  Directory the chroots are in. Default: $CHROOTS
    -e          If the chroot is not encrypted, encrypt it.
                If specified twice, prompt to change the encryption passphrase.
    -k KEYFILE  File or directory to store the (encrypted) encryption keys in.
                If unspecified, the keys will be stored in the chroot if doing a
                first encryption, or auto-detected on existing chroots.
    -n          Create the chroot if it doesn't exist.
    -p          Prints out the path to the mounted directory on stdout."

# Common functions

# Exits the script with exit code $1, spitting out message $@ to stderr
error() {
    local ecode="$1"
    shift
    if [ "$ecode" -eq 1 ]; then
        echo_color "r" "$*" 1>&2
    else
        echo "$*" 1>&2
    fi
    exit "$ecode"
}

# Setup trap ($1) in case of interrupt or error.
# Traps explicitly do not exit on command error.
# Traps are first disabled to avoid executing clean-up commands twice.
# In the case of interrupts, exit is called to avoid the script continuing.
# $1 must either be empty or end in a semicolon.
settrap() {
    trap "set +e; trap - INT HUP TERM 0; $1 exit 2" INT HUP TERM
    trap "set +e; trap - INT HUP TERM 0; $1" 0
}

# Prepend a command to the existing $TRAP
addtrap() {
    OLDTRAP="$TRAP"
    TRAP="$1;$TRAP"
    settrap "$TRAP"
}

# Revert the last trap change
undotrap() {
    TRAP="$OLDTRAP"
    settrap "$TRAP"
}

# Works mostly like built-in getopts but silently coalesces positional arguments.
# Does not take parameters. Set getopts_string prior to calling.
# Sets getopts_var and getopts_arg.
# $@ will be left with the positional arguments, so you should NOT shift at all.
# In bash, enables alias expansion, but that shouldn't impact anything.
shopt -q -s expand_aliases 2>/dev/null || true
# Running count of the number of positional arguments
# We're done processing if all of the remaining arguments are positional.
getopts_npos=0
getopts_dashdash=''
alias getopts_nextarg='getopts_ret=1
    while [ "$#" -gt "$getopts_npos" ]; do
        if [ -z "$getopts_dashdash" ] && getopts "$getopts_string" getopts_var; then
            if [ "$(($#+1-OPTIND))" -lt "$getopts_npos" ]; then
                # Bad parameter usage ate a positional argument.
                # Generate the proper error message by abusing getopts.
                set -- "-$getopts_var"
                getopts "$getopts_var:" getopts_var
                shift
            fi
            getopts_arg="$OPTARG"
            getopts_ret=0
            # Avoid -- confusion by shifting if OPTARG is set
            if [ -n "$OPTARG" ]; then
                shift "$((OPTIND-1))"
                OPTIND=1
            fi
            break
        fi
        # Do not let getopts consume a --
        if [ "$OPTIND" -gt 1 ]; then
            shift "$((OPTIND-2))"
            if [ "$1" != "--" ]; then
                shift
            fi
        fi
        OPTIND=1
        if [ -z "$getopts_dashdash" -a "$1" = "--" ]; then
            # Still need to loop through to fix the ordering
            getopts_dashdash=y
        else
            set -- "$@" "$1"
            getopts_npos="$((getopts_npos+1))"
        fi
        shift
    done
    [ "$getopts_ret" = 0 ]'

# Compares $RELEASE to the specified releases, assuming $DISTRODIR/releases is
# sorted oldest to newest. Every two parameters are considered criteria that are
# ORed together. The first parameter is the comparator, as provided to "test".
# The second parameter is the release to compare to. A comparison against a
# release from a different distro always fails. Since either $DISTRODIR/releases
# has to be readable or the release list has to be embedded, and RELEASE has to
# be set properly, this function should only be used in the context of targets.
# Returns non-zero if the release doesn't match
# Example:  release -ge quantal -ge wheezy
release() {
    if [ "$(($# % 2))" -ne 0 ]; then
        error 3 "$(echo_color "y" "invalid parameters to release(): $*")"
    fi
    # Load up the list of releases; this will be replaced with a literal list
    local releases="`cat "$DISTRODIR/releases" 2>/dev/null`"
    if [ -z "$releases" ]; then
        error 3 "$(echo_color "y" "list of releases for $DISTRO not found")"
    fi
    # End-of-word regex for awk
    local eow='([^a-z]|$)'
    local relnum="`echo "$releases" | awk "/^$RELEASE$eow/ {print NR; exit}"`"
    if [ -z "$relnum" ]; then
        error 3 "$(echo_color "y" "$RELEASE not found in $DISTRO")"
    fi
    while [ "$#" -ge 2 ]; do
        local cmp="`echo "$releases" | awk "/^$2$eow/ {print NR; exit}"`"
        if [ -n "$cmp" ] && test "$relnum" "$1" "$cmp"; then
            return 0
        fi
        shift 2
    done
    return 1
}

# Large writes to slow devices (e.g. SD card or USB stick) can cause a task to
# be stuck for longer than 120 seconds, which triggers a kernel panic (and an
# immediate reboot). Instead of disabling the timeout altogether, we just make
# sure the kernel does not panic (this is the default configuration of a vanilla
# kernel). See crbug.com/260955 for details.
disablehungtask() {
    echo 0 > /proc/sys/kernel/hung_task_panic
}

# Run an awk program, without buffering its output.
# unbuffered_awk 'program' [argument ...]
# In the awk code, all "print" calls must be replaced by "output"
#
# - Detects whether to run mawk or gawk (mawk is preferred as it is faster),
# - Prepends the definition of the "output" function to the awk program
# - Run the modified awk program.
# mawk needs '-W interactive' to flush the output properly (fflush does not
# work as documented, but apparently this behaviour is intentional, see
# https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=593504).
# Furthermore, fflush is not POSIX so we cannot use any other awk flavor.
unbuffered_awk() {
    local cmd
    if hash mawk 2>/dev/null; then
        cmd="mawk -W interactive"
    elif hash gawk 2>/dev/null; then
        cmd="gawk"
    else
        echo "Cannot find mawk or gawk." 1>&2
        return 1
    fi

    local program="$1"
    shift

    $cmd '
    function output(s) {
        print s
        fflush()
    }
    '"$program" "$@"
}

# Validate a chroot name: It cannot contain any /, and cannot be ".", ".." nor
# an empty string.
validate_name() {
    if [ "${1%/*}" != "$1" -o "$1" = "." -o "$1" = ".." -o -z "$1" ]; then
        return 1
    fi
    return 0
}

# Returns the mountpoint a path is on. The path doesn't need to exist.
# $1: the path to check
# outputs on stdout
getmountpoint() {
    mp="`readlink -m -- "$1"`"
    while ! stat -c '%m' "${mp:-/}" 2>/dev/null; do
        mp="${mp%/*}"
    done
}

# Echos to stderr, or /dev/tty if stdin is a tty but stderr is not
echo_tty() {
    if [ -t 0 -a ! -t 2 ]; then
        echo "$@" 1>/dev/tty
    else
        echo "$@" 1>&2
    fi
}

# Outputs colored text to stdout
# usage: echo_color [l][color] [colored string] [uncolored string]
# Specifying "t" (thick) uses bold text.
# Color can be red, green, yellow, blue, magenta, cyan.
# Color can be specified with just the first letter.
# example: echo_color "tr" "bold red" "normal text"
echo_color() {
    # If not outputting to a tty print no colors.
    if [ ! -t 2 ]; then
        shift
        echo "$@"
        return
    fi
    printf "\033["
    local c="$1"
    if [ "${c#t}" != "$c" ]; then
        printf "1;"
        c="${c#t}"
    else
        printf "0;"
    fi
    case "$c" in
        r*) printf "31m";;
        g*) printf "32m";;
        y*) printf "33m";;
        b*) printf "34m";;
        m*) printf "35m";;
        c*) printf "36m";;
         *) printf "37m";;
    esac
    shift
    local s='\n'
    if [ "$1" = '-n' ]; then
        s=''
        shift
    fi
    echo '-n' "$1"
    printf "\033[0m"
    shift
    echo '-n' "$*"
    printf "$s"
}

# Websocket interface
PIPEDIR='/tmp/chromeOSLinux-ext'
CRIATDISPLAY="$PIPEDIR/kiwi-display"
CROUTONLOCKDIR='/tmp/chromeOSLinux-lock'

# Write a command to chromeOSLinuxwebsocket, and read back response
websocketcommand() {
    # Check that $PIPEDIR and the FIFO pipes exist
    if ! [ -d "$PIPEDIR" -a -p "$PIPEDIR/in" -a -p "$PIPEDIR/out" ]; then
        echo "EError $PIPEDIR/in or $PIPEDIR/out are not pipes."
        exit 0
    fi

    if ! timeout 3 \
           sh -c "flock 5; cat > '$PIPEDIR/in';
                  cat '$PIPEDIR/out'" 5>"$PIPEDIR/lock"; then
        echo "EError timeout"
    fi
    chmod -Rf g+rwX "$PIPEDIR" || true
    chgrp -Rf chromeOSLinux "$PIPEDIR" || true
}

# Process arguments
getopts_string='c:ek:np'
while getopts_nextarg; do
    case "$getopts_var" in
    c) CHROOTS="`readlink -m -- "$getopts_arg"`";;
    e) ENCRYPT="$((ENCRYPT+1))";;
    k) KEYFILE="$getopts_arg";;
    n) CREATE='y';;
    p) PRINT='y';;
    \?) error 2 "$USAGE";;
    esac
done

# Need at least one chroot listed
if [ $# = 0 ]; then
    error 2 "$USAGE"
fi

# We need to run as root
if [ "$USER" != root -a "$UID" != 0 ]; then
    error 2 "$APPLICATION must be run as root."
fi

# Make sure we always exit with echo on the tty.
addtrap "stty echo 2>/dev/null"

# Whitelists a directory for symlink and other hardening
whitelist() {
    # As of 67, symlinks and fifos are blocked in stateful partitions.
    # Add exceptions for this chroot.
    local sec='/sys/kernel/security' mounted=''
    if mountpoint -q "$sec"; then
        mounted=y
    elif ! mount -n -t securityfs -o nodev,noexec,nosuid securityfs "$sec"; then
        return
    fi
    policies="$sec/chromiumos/inode_security_policies"
    if [ -d "$policies" ]; then
        for policy in "$policies/allow_"*; do
            printf "$CHROOT" > "$policy"
        done
    fi
    if [ -z "$mounted" ]; then
        umount "$sec"
    fi
}

# Function to prompt the user for a passphrase. Sets $passphrase.
promptNewPassphrase() {
    echo_tty -n "Choose an encryption passphrase for $NAME: "
    [ -t 0 ] && stty -echo
    while [ -z "$passphrase" ]; do
        read -r passphrase
        if [ -z "$passphrase" ]; then
            echo_tty ''
            echo_tty -n 'You must specify a passphrase: '
            continue
        fi
        echo_tty ''
        echo_tty -n 'Please confirm your passphrase: '
        read -r confirmation
        if [ "$confirmation" != "$passphrase" ]; then
            passphrase=''
            echo_tty ''
            echo_tty -n 'Passphrases do not match; try again: '
        fi
        confirmation=''
    done
    [ -t 0 ] && stty echo
    echo_tty ''
}

# Mount each chroot
for NAME in "$@"; do
    if ! validate_name "$NAME"; then
        error 2 "Invalid chroot name '$NAME'."
    fi

    # Check for existence
    CHROOT="$CHROOTS/$NAME"
    movesrc=''
    if [ -d "$CHROOT" ]; then
        if [ -f "$CHROOT/.ecryptfs" -o -n "$ENCRYPT" ]; then
            if [ -z "$ENCRYPT" ]; then
                ENCRYPT=0
            fi
            # Check for non-encrypted files that we may need to move
            for file in "$CHROOT/"*; do
                if [ "${file#*/ECRYPTFS_FNEK_ENCRYPTED}" = "$file" ]; then
                    movesrc="$CHROOT"
                    break
                fi
            done
        fi
    elif [ -z "$CREATE" ]; then
        error 1 "$CHROOT not found."
    else
        mkdir -p "$CHROOT"
    fi

    CHROOTSRC="$CHROOT"
    CHROOT="$ROOT/${CHROOT#/}"

    # Ensure there's a root-only folder for the bind-mounted chroot
    mkdir -p -m 0700 "$CHROOT"
    chown root:root "$ROOT"
    chmod 700 "$ROOT"

    # Extraordinarily vague usage stat; see https://crbug.com/989219
    if [ -z "${CROUTON_DISABLE_STATS-}" -a -d "${METRICSDIR%/*}" ]; then
        mkdir -p -m 0777 "$METRICSDIR"
        chown root:root "$METRICSDIR"
        chmod 777 "$METRICSDIR"
        touch "$METRICSDIR/chromeOSLinux-started"
    fi || true

    if [ -n "$PRINT" ]; then
        echo "$CHROOT"
    fi

    # Check if we actually need to mount
    if ! mountpoint -q "$CHROOT"; then
        if [ -z "$ENCRYPT" ]; then
            mount --bind "$CHROOTSRC" "$CHROOT"
            mount -i -o "remount,$MOUNTOPTS" "$CHROOT"
            mount -i -o 'remount,symfollow' "$CHROOT" 2>/dev/null || true
            mount --make-private "$CHROOT"
            whitelist "$CHROOT"
            continue
        fi

        # We must be on a terminal, unless we already have a password in env.
        if [ ! -t 0 -a -z "$CROUTON_PASSPHRASE$CROUTON_NEW_PASSPHRASE" ]; then
            error 2 'STDIN is not a terminal; cannot request passwords.'
        fi

        # Ensure that there's a root password set before decrypting the chroot,
        # unless the passphrase was specified via env, which isn't secure anyway
        if [ ! -f '/mnt/stateful_partition/etc/devmode.passwd' ]; then
            echo_tty \
'You must have a root password in Chromium OS to mount encrypted chroots.'
            if [ -z "$CROUTON_PASSPHRASE$CROUTON_NEW_PASSPHRASE" ]; then
                while ! chromeos-setdevpasswd; do :; done
            fi
        fi

        # Detect the key file
        if [ -z "$KEYFILE" ]; then
            KEYFILE="$CHROOTSRC/.ecryptfs"
            if [ -f "$KEYFILE" ]; then
                header="`head -n1 "$KEYFILE"`"
                if [ -n "$header" ]; then
                    KEYFILE="$header"
                fi
            fi
        elif [ "${KEYFILE#/}" = "$KEYFILE" ]; then
            KEYFILE="$PWD/$KEYFILE"
        fi
        if [ -d "$KEYFILE" -o "${KEYFILE%/}" != "$KEYFILE" ]; then
            KEYFILE="${KEYFILE%/}/$NAME"
        fi
        if ! mkdir -p "`dirname "$KEYFILE"`"; then
            error 1 "Unable to create directory for $KEYFILE"
        fi

        # If we just created it, choose and create the keyfile.
        passphrase="${CROUTON_PASSPHRASE:-"$CROUTON_NEW_PASSPHRASE"}"
        if [ ! -f "$CHROOTSRC/.ecryptfs" ]; then
            if [ -e "$KEYFILE" ]; then
                error 1 "Encryption key file $KEYFILE already exists. Refusing to overwrite!"
            fi

            promptNewPassphrase

            if [ -z "$CROUTON_WEAK_RANDOM" ]; then
                random="/dev/random"
                echo 'Generating keys (move the mouse to generate entropy)...' 1>&2
            else
                random="/dev/urandom"
                echo 'Generating keys from /dev/urandom...' 1>&2
            fi
            key="`hexdump -v -n32 -e'32/1 "%02x"' "$random"`"
            fnek="`hexdump -v -n32 -e'32/1 "%02x"' "$random"`"
            echo 'done' 1>&2

            # Create key file
            wrappedkey="`mktemp`"
            wrappedfnek="`mktemp`"
            addtrap "rm -f '$wrappedkey' '$wrappedfnek'"
            echo -n "$key
$passphrase" | ecryptfs-wrap-passphrase "$wrappedkey" -
            echo -n "$fnek
$passphrase" | ecryptfs-wrap-passphrase "$wrappedfnek" -
            unset key fnek
            echo | cat - "$wrappedkey" "$wrappedfnek" > "$KEYFILE"
            if [ ! -f "$CHROOTSRC/.ecryptfs" ]; then
                echo "$KEYFILE" > "$CHROOTSRC/.ecryptfs"
            fi
        elif [ ! -f "$KEYFILE" ]; then
            error 1 "Unable to find encryption key file $KEYFILE"
        else
            echo_tty -n "Enter encryption passphrase for $NAME: "
            [ -t 0 ] && stty -echo
            if [ -z "$passphrase" ]; then
                read -r passphrase
            fi
            [ -t 0 ] && stty echo
            echo_tty ''

            wrappedkey="`mktemp`"
            wrappedfnek="`mktemp`"
            addtrap "rm -f '$wrappedkey' '$wrappedfnek'"

            # Extract wrapped keys from keyfile
            wrappedtotal="$(($(wc -c < "$KEYFILE") - $(head -n 1 "$KEYFILE" | wc -c)))"
            wrappedsize="$((wrappedtotal / 2))"
            tail -c "$wrappedtotal" "$KEYFILE" | head -c "$wrappedsize" > "$wrappedkey"
            tail -c "$wrappedsize" "$KEYFILE" > "$wrappedfnek"

            # Change the passphrase if requested
            if [ "${ENCRYPT:-0}" -ge 2 ]; then
                oldpassphrase="$passphrase"
                passphrase="$CROUTON_NEW_PASSPHRASE"
                promptNewPassphrase

                echo "Applying passphrase change" 1>&2
                echo -n "$oldpassphrase
$passphrase" | ecryptfs-rewrap-passphrase "$wrappedkey" -
                echo -n "$oldpassphrase
$passphrase" | ecryptfs-rewrap-passphrase "$wrappedfnek" -
                echo | cat - "$wrappedkey" "$wrappedfnek" > "$KEYFILE"

                unset oldpassphrase
            fi
        fi

        # Add keys to keychain and extract
        keysig="`echo -n "$passphrase" \
            | ecryptfs-unwrap-passphrase "$wrappedkey" - 2>/dev/null \
            | ecryptfs-add-passphrase - 2>/dev/null \
            | sed -n 's/.*\[\([0-9a-zA-Z]*\)\].*/\1/p'`"
        fneksig="`echo -n "$passphrase" \
            | ecryptfs-unwrap-passphrase "$wrappedfnek" - 2>/dev/null \
            | ecryptfs-add-passphrase - 2>/dev/null \
            | sed -n 's/.*\[\([0-9a-zA-Z]*\)\].*/\1/p'`"
        if [ -z "$keysig" -o -z "$fneksig" ]; then
            error 1 "Failed to decrypt $NAME."
        fi

        # Create a new session, and link user keyring to that session,
        # as required by ecryptfs.
        keyctl new_session >/dev/null
        keyctl link @u @s

        mnt="ecryptfs_sig=$keysig,ecryptfs_fnek_sig=$fneksig"
        mnt="$mnt,ecryptfs_cipher=aes,ecryptfs_key_bytes=16"
        mnt="$mnt,ecryptfs_unlink_sigs,$MOUNTOPTS"

        if ! mount -i -t ecryptfs -o "$mnt" "$CHROOTSRC" "$CHROOT"; then
            error 1 "Failed to mount $NAME."
        fi

        mount -i -o 'remount,symfollow' "$CHROOT" 2>/dev/null || true

        whitelist "$CHROOT"
    fi

    # Perform the move
    if [ -z "$movesrc" ]; then
        continue
    fi
    response=y
    for file in "$movesrc/"*; do
        if [ "${file#*/ECRYPTFS_FNEK_ENCRYPTED}" != "$file" ]; then
            echo -n \
"About to continue encrypting the unencrypted portion of $NAME.
If this is unexpected, then it could mean that someone's trying to inject files
into your encrypted chroot, potentially allowing them to steal your data.
Please choose one of the following options:
yes  -- You are sure you want to continue moving the files in. They're yours.
del  -- You do not like these files and want them deleted permanently.
list -- You do not know what these files are and want to list them.
no   -- You don't want to decide one way or another quite yet.
> " 1>&2
            # Don't allow a response to be specified in env unless the password
            # was also specified in env.
            if [ -n "$CROUTON_PASSPHRASE" -a \
                    -n "$CROUTON_MOUNT_RESPONSE" ]; then
                response="$CROUTON_MOUNT_RESPONSE"
                echo "$response" 1>&2
            else
                read -r response
            fi
            break
        fi
    done
    case "$response" in
    y*|Y*) (
        echo -n "Encrypting $NAME; please wait..." 1>&2
        cd "$movesrc"
        tmp="`mktemp -d --tmpdir=/usr/local/tmp 'ECRYPTFS_MOVE_STAGING_XXXXXX'`"
        find -not -name 'ECRYPTFS_FNEK_ENCRYPTED*' \
             -not -wholename './ECRYPTFS_MOVE_STAGING_*' \
             -not -wholename '.' \
             -not -wholename './.ecryptfs' \
             -not -wholename './.chromeOSLinux-targets' \
             -exec mkdir -p "$tmp/{}" ';' \
             -exec rmdir "$tmp/{}" ';' \
             '(' -prune , -exec mv -fT '{}' "$tmp/{}" ';' ')' 1>&2
        for tmp in ECRYPTFS_MOVE_STAGING_*; do
            (
                cd "$tmp"
                find '!' '(' -type d -exec test -d "$CHROOT/{}" ';' ')' \
                     '(' -prune , -exec mv -fT '{}' "$CHROOT/{}" ';' ')' \
                     -exec echo -n . ';' 1>&2
                find -depth -type d -not -wholename . \
                     -exec test -d "$CHROOT/{}" ';' \
                     -exec rmdir '{}' ';' 1>&2
            )
            rmdir "$tmp" 2>/dev/null || true
        done
        echo 'done.' 1>&2
    );;
    d*|D*) (
        echo "Deleting unencrypted files in $NAME; please wait..." 1>&2
        cd "$movesrc"
        find -not -name 'ECRYPTFS_FNEK_ENCRYPTED*' \
             -not -wholename '.' \
             -not -wholename './.ecryptfs' \
             -not -wholename './.chromeOSLinux-targets' \
             '(' -prune , -exec rm -rvf '{}' ';' ')' 1>&2
        echo 'Done.' 1>&2
    );;
    l*|L*) (
        echo "Listing unencrypted files in $NAME; please wait..." 1>&2
        cd "$movesrc"
        find -not -name 'ECRYPTFS_FNEK_ENCRYPTED*' \
             -not -name 'ECRYPTFS_MOVE_STAGING_*' \
             -not -wholename '.' \
             -not -wholename './.ecryptfs' \
             -not -wholename './.chromeOSLinux-targets' \
             -print -prune | cut -b2- 1>&2
        echo 'Done.' 1>&2
        exit 2
    );;
    esac
done

exit 0
